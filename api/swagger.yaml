---
swagger: "2.0"
info:
  description: "This is a RESTful API that uses a smart contract deployed over the Ethereum mainnet to track all the files stored on IPFS"
  version: "1.0.0"
  title: "IPFS REST API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "soufiane_hajazi@um5.ac.ma"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/v1/ipfs"

schemes:
  - "http"

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in
      the 'Authorization' header.


      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /login giving a valid user & password.


      The following syntax must be used in the 'Authorization' header :

          Bearer xxxxxx.yyyyyyy.zzzzzz
paths:
  /signup:
    post:
      tags:
        - "Authentication"
      summary: "signs up the user into the system"
      description: ""
      operationId: "signupUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "email"
          in: "query"
          description: "user's email"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "user's password"
          required: true
          type: "string"
      responses:
        "200":
          description: "signed up successfully"
          schema:
            $ref: "#/definitions/Token"

        "400":
          description: "Invalid public address supplied"
      x-swagger-router-controller: "Authentication"
  /login:
    get:
      tags:
        - "Authentication"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "query"
          description: "user's email"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "user's password"
          required: true
          type: "string"
      responses:
        "200":
          description: "Logged in successfully"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                description: "status."
              token:
                type: "string"
                description: "holds jwt token of the user"
        "400":
          description: "Invalid public address supplied "
      x-swagger-router-controller: "Authentication"

  /file/getFileByHash:
    get:
      tags:
        - "File"
      summary: "gets the file by its hash "
      description: ""
      operationId: "getFileByHash"
      security:
        - Bearer: []
      x-security-scopes:
        - user
      produces:
        - "image/jpeg"
      parameters:
        - name: "hash"
          in: "query"
          description: "file hash"
          required: true
          type: "string"
      responses:
        "200":
          description: "Logged out successfully"
          schema:
            type: "file"
        "400":
          description: "No session found "
      x-swagger-router-controller: "getFileByHash"
  /file/getFileByTitle:
    get:
      tags:
        - "File"
      summary: "gets the file by its title "
      description: ""
      operationId: "getFileByTitle"
      security:
        - Bearer: []
      x-security-scopes:
        - user
      produces:
        - "multipart/form-data"
      parameters:
        - name: "title"
          in: "query"
          description: "file title"
          required: true
          type: "string"
      responses:
        "200":
          description: "File download"
          schema:
            type: "file"
        "400":
          description: "No session found "
      x-swagger-router-controller: "getFileByTitle"
  /file/getAllFiles:
    get:
      tags:
        - "File"
      summary: "returns all the files owned by the user "
      description: ""
      operationId: "getAllFiles"
      security:
        - Bearer: []
      x-security-scopes:
        - user
      produces:
        - "string"
      parameters:
        - name: "contentType"
          in: "query"
          description: "file content type (image/png,application/pdf)"
          required: false
          type: "string"

      responses:
        "200":
          description: "Files fetched"
          schema:
            type: "string"
        "400":
          description: "No session found "
      x-swagger-router-controller: "getAllFiles"
  /file/uploadFile:
    post:
      tags:
        - "File"
      summary: "uploads the file to ipfs "
      description: ""
      operationId: "uploadFile"
      security:
        - Bearer: []
      x-security-scopes:
        - user
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "title"
          in: "formData"
          description: "the title of the file"
          required: true
          type: "string"
        - name: "file"
          in: "formData"
          description: "The file to upload"
          required: true
          type: "file"
        - name: "contentType"
          in: "formData"
          description: "The type of the file"
          required: true
          type: "string"
      responses:
        "200":
          description: "File uploaded successfully"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                description: "status."
              title:
                type: "string"
                description: "title of the file"
              hashOfFile:
                type: "string"
                description: "CID of the file"
        "400":
          description: "Sorry we can't upload the file right now... "
      x-swagger-router-controller: "uploadFile"
  /file/updateFile:
    put:
      tags:
        - "File"
      summary: "updates the hash of the file "
      description: ""
      operationId: "updateFile"
      security:
        - Bearer: []
      x-security-scopes:
        - user
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "title"
          in: "formData"
          description: "the title of the file"
          required: true
          type: "string"
        - name: "file"
          in: "formData"
          description: "The file to upload"
          required: true
          type: "file"
      responses:
        "200":
          description: "File uploaded successfully"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                description: "status."
              title:
                type: "string"
                description: "title of the file"
              cid:
                type: "object"
                description: "CID of the file"
        "400":
          description: "Sorry we can't update the file right now... "
      x-swagger-router-controller: "updateFile"
  /file/deleteFile:
    delete:
      tags:
        - "File"
      summary: "deletes file from  smart contract "
      description: ""
      operationId: "deleteFile"
      security:
        - Bearer: []
      x-security-scopes:
        - user
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "title"
          in: "query"
          description: "the title of the file"
          required: true
          type: "string"
      responses:
        "200":
          description: "File deleted successfully"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                description: "status."

        "400":
          description: "Sorry we can't delete the file right now... "
      x-swagger-router-controller: "deleteFile"
definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  Resource:
    type: object
    properties:
      resource:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string
